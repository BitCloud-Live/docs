[
{
	"uri": "/",
	"title": "Quickstart",
	"tags": [],
	"description": "",
	"content": " Build uv cli using make $ make clean $ make -B build  Prebuilt binaries Common platform binaries are published on the releases page. this includes linux, osx, windows and even arm binary for arm linux platforms such as raspbian.\nQuick installation OSX $ wget https://github.com/uvcloud/uv-cli/releases/download/V2.1.0/uv-V2.1.0-darwin-amd64 -O /usr/local/bin/uv  Linux $ sudo wget https://github.com/uvcloud/uv-cli/releases/download/V2.1.0/uv-V2.1.0-linux-amd64 -O /usr/local/bin/uv $ sudo chmod +x /usr/local/bin/uv  Windows Just grap the latest executive file in release page and run it from cmd.\nSee Releases.\nQuickstart  See Documentations for more details.\nGitlab integration Test, build \u0026amp; deploy can be automated using gitlab ci.\nAn example of .gitlab-ci.yaml configuration file is as follow:\n# This file is a template, and might need editing before it works on your project. # Official docker image. image: docker:latest services: - docker:dind stages: - test - build - deploy variables: LINK: controller.uvcloud.ir:8443 #Configure this variable in Secure Variables: UVCLOUD_USER: \u0026lt;username\u0026gt; # UVCLOUD_PASSWORD: ----\u0026gt; It's more secure to be setted from settings -\u0026gt; ci/cd -\u0026gt; variables. APP: rec IMAGE: \u0026quot;hub.uvcloud.ir/$UVCLOUD_USER/$APP:$CI_COMMIT_REF_NAME\u0026quot; # Test stages test1: stage: test before_script: [] script: - echo run tests test2: stage: test before_script: [] script: - echo run tests # Build stages before_script: - docker login -u \u0026quot;$UVCLOUD_USER\u0026quot; -p \u0026quot;$UVCLOUD_PASSWORD\u0026quot; hub.uvcloud.ir build-master: stage: build script: - docker build --pull -t \u0026quot;$IMAGE\u0026quot; . - docker push \u0026quot;$IMAGE\u0026quot; only: - master # use `tags` for build when ever a new tag pushed to the repository deploy: image: hub.uvcloud.ir/uvcloud/uv-cli:V2.0.0-rc7 stage: deploy before_script: - echo $UVCLOUD_PASSWORD | uv-cli login -u $UVCLOUD_USER - uv-cli app:info -n $APP script: - \u0026quot;uv-cli app:configSet -n $APP -i $IMAGE\u0026quot; - \u0026quot;uv-cli app:info -n $APP\u0026quot;  "
},
{
	"uri": "/posts/dom/",
	"title": "External domains",
	"tags": [],
	"description": "",
	"content": " Start using external domains See the below asciinema video for details:\n\n"
},
{
	"uri": "/posts/hub/",
	"title": "Using docker hub",
	"tags": [],
	"description": "",
	"content": " How to use UVCloud docker hub Open up your terminal/cmd and login into docker using your uvcloud credentials.\nSee the below asciinema video for details:\n\n"
},
{
	"uri": "/posts/upgrade/",
	"title": "How to upgrade app docker image",
	"tags": [],
	"description": "",
	"content": " Workflow  Requirements  Docker installation follow this instructions UV cli installation latest osx/linux binaries   Now go to the app working directory\n$ uv --version uv version v2.0.0-alpha.1 $ uv login Username: \u0026lt;username\u0026gt; Password: *** Login succesful $ uv app:list INFO[0000] services:\u0026lt;updated:\u0026lt;seconds:1537813897 \u0026gt; state:Up name:\u0026quot;\u0026lt;username\u0026gt;\u0026quot; \u0026gt; $ uv app:info -n \u0026lt;app\u0026gt; # look after Config: image:\u0026quot;xxx:v0.3.2\u0026quot; INFO[0000] Config: image:\u0026quot;hub.uvcloud.ir/\u0026lt;username\u0026gt;/\u0026lt;app-image\u0026gt;:v0.3.2\u0026quot; minScale:1 port:8080 routes:\u0026quot;\u0026lt;app\u0026gt;.uvapps.io\u0026quot; endpointType:\u0026quot;http\u0026quot; INFO[0000] Created: seconds:1537793986 ,\tUpdated: seconds:1537813897 INFO[0000] VCAP_SERVICES: { \u0026quot;postgresql\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;my-pg\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;postgresql\u0026quot;, \u0026quot;tags\u0026quot;: null, \u0026quot;plan\u0026quot;: \u0026quot;starter\u0026quot;, \u0026quot;credentials\u0026quot;: { \u0026quot;database\u0026quot;: \u0026quot;postgres\u0026quot;, \u0026quot;host\u0026quot;: \u0026quot;my-pg\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;xxx\u0026quot;, \u0026quot;port\u0026quot;: \u0026quot;5432\u0026quot;, \u0026quot;uri\u0026quot;: \u0026quot;postgresql://postgres:xxx@my-pg:5432/postgres\u0026quot;, \u0026quot;username\u0026quot;: \u0026quot;postgres\u0026quot; } } ] INFO[0000] Environment variables: None $ # now pull app latest version and check tags $ git pull --rebase $ git tag v0.1.2 v0.2.0 v0.3.0 v0.3.1 v0.3.2 # \u0026lt;-- this is same with the current docker image tag, so we need to make a new tag for new docker image $ git tag v0.3.3 $ git push --tags Total 0 (delta 0), reused 0 (delta 0) To https://gitlab.com/xxx/xxx * [new tag] v0.3.3 -\u0026gt; v0.3.3 $ git tag v0.1.2 v0.2.0 v0.3.0 v0.3.1 v0.3.2 v0.3.3  Now we make the new docker image\n$ docker login hub.uvcloud.ir Username: \u0026lt;username\u0026gt; Password: *** Login successful $ docker built -t hub.uvcloud.ir/\u0026lt;username\u0026gt;/\u0026lt;app-image\u0026gt;:v0.3.3 . # or maybe a make docker-build REDACTED $ docker push hub.uvcloud.ir/\u0026lt;username\u0026gt;/\u0026lt;app-image\u0026gt;:v0.3.3 # or maybe a make docker-push REDACTED  Now we need to upgrade the app image for the uvcloud\n$ uv app:configSet -n \u0026lt;app\u0026gt; -i hub.uvcloud.ir/\u0026lt;username\u0026gt;/\u0026lt;app-image\u0026gt;:v0.3.3 # look after Config: image:\u0026quot;xxx:v0.3.3\u0026quot; INFO[0000] Config: image:\u0026quot;hub.uvcloud.ir/\u0026lt;username\u0026gt;/\u0026lt;app-image\u0026gt;:v0.3.3\u0026quot; minScale:1 port:8080 routes:\u0026quot;\u0026lt;app\u0026gt;.uvapps.io\u0026quot; endpointType:\u0026quot;http\u0026quot; INFO[0000] Created: seconds:1537793986 ,\tUpdated: seconds:1537813897 INFO[0000] VCAP_SERVICES: { \u0026quot;postgresql\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;my-pg\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;postgresql\u0026quot;, \u0026quot;tags\u0026quot;: null, \u0026quot;plan\u0026quot;: \u0026quot;starter\u0026quot;, \u0026quot;credentials\u0026quot;: { \u0026quot;database\u0026quot;: \u0026quot;postgres\u0026quot;, \u0026quot;host\u0026quot;: \u0026quot;my-pg\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;xxx\u0026quot;, \u0026quot;port\u0026quot;: \u0026quot;5432\u0026quot;, \u0026quot;uri\u0026quot;: \u0026quot;postgresql://postgres:xxx@my-pg:5432/postgres\u0026quot;, \u0026quot;username\u0026quot;: \u0026quot;postgres\u0026quot; } } ] INFO[0000] Environment variables: None  Enjoy!\n"
},
{
	"uri": "/posts/vcap/",
	"title": "Start using vcap services",
	"tags": [],
	"description": "",
	"content": " VCAP_SERVICES For bindable services, UVCloud adds connection details to the VCAP_SERVICES environment variable after binding a service instance to your application.\nThe results are returned as a JSON document that contains an object for each service for which one or more instances are bound to the application. The service object contains a child object for each service instance of that service that is bound to the application. The attributes that describe a bound service are defined in the table below.\nThe key for each service in the JSON document is the same as the value of the “label” attribute.\nAttribute Description binding_name The name assigned to the service binding by the user. instance_name The name assigned to the service instance by the user. name The binding_name if it exists; otherwise the instance_name. label The name of the service offering. tags An array of strings an app can use to identify a service instance. plan The service plan selected when the service instance was created. credentials A JSON object containing the service-specific credentials needed to access the service instance.\nThe example below shows the value of VCAP_SERVICES for bound instances of several services available in the Pivotal Web Services Marketplace.\nVCAP_SERVICES=\n{ \u0026quot;elephantsql\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;elephantsql-binding-c6c60\u0026quot;, \u0026quot;binding_name\u0026quot;: \u0026quot;elephantsql-binding-c6c60\u0026quot;, \u0026quot;instance_name\u0026quot;: \u0026quot;elephantsql-c6c60\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;elephantsql\u0026quot;, \u0026quot;tags\u0026quot;: [ \u0026quot;postgres\u0026quot;, \u0026quot;postgresql\u0026quot;, \u0026quot;relational\u0026quot; ], \u0026quot;plan\u0026quot;: \u0026quot;turtle\u0026quot;, \u0026quot;credentials\u0026quot;: { \u0026quot;uri\u0026quot;: \u0026quot;postgres://exampleuser:examplepass@babar.elephantsql.com:5432/exampleuser\u0026quot; } } ], \u0026quot;sendgrid\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;mysendgrid\u0026quot;, \u0026quot;binding_name\u0026quot;: null, \u0026quot;instance_name\u0026quot;: \u0026quot;mysendgrid\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;sendgrid\u0026quot;, \u0026quot;tags\u0026quot;: [ \u0026quot;smtp\u0026quot; ], \u0026quot;plan\u0026quot;: \u0026quot;free\u0026quot;, \u0026quot;credentials\u0026quot;: { \u0026quot;hostname\u0026quot;: \u0026quot;smtp.sendgrid.net\u0026quot;, \u0026quot;username\u0026quot;: \u0026quot;QvsXMbJ3rK\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;HCHMOYluTv\u0026quot; } } ] }  Of course there is some libraries out there for handle VCAP_SERVICES more smoothly, such as:\nhttps://www.npmjs.com/package/vcap_services for Nodejs\nhttps://pypi.org/project/vcap-services/ for python\n"
},
{
	"uri": "/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " UVCloud "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/posts/",
	"title": "Posts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]